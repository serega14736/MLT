import numpy as np
import matplotlib.pyplot as plt
from math import exp, sqrt
import pandas as pd
from sklearn import datasets

H = np.arange(0.2, 1.0, 0.1)
colors = ['red', 'green', 'blue', 'violet', 'yellow', 'brown', 'orange', 'gray', 'magenta']
kernels = ['гауссовское', 'квартическое']


def kernelG(x):
    return exp((-1 / 2) * x * x)


def kernelQ(x):
    return pow(1 - x * x, 2) * int(abs(x) < 1)


def euclidean(x, xi):
    return sqrt(pow(x - xi, 2))


def nadarayaWatson(X, y, kernel, metric, h, X_test):
    n = X.size
    S = np.zeros(n)
    Y = np.zeros(n)
    for l in range(n):
        W = np.zeros(n)
        for i in range(n):
            W[i] = kernel(metric(X_test[l], X[i]) / h)
            S[i] = W[i] * y[i]
        Y[l] = sum(S) / sum(W)
    return Y


def SSE(y, Y):
    return ((Y - y) ** 2).sum()


# def generate_wave_set(n_support=1000, n_train=250):
    # data = {}
    # data['support'] = np.linspace(0, 2 * np.pi, num=n_support)
    # data['x_train'] = np.sort(np.random.choice(data['support'], size=n_train, replace=True))
    # data['y_train'] = np.cos(data['x_train']).ravel()
    # data['y_train'] += 0.5 * (0.55 - np.random.rand(data['y_train'].size))
    # return data

# data = generate_wave_set(n_train=100)
_y = np.array([1.0978990541217315, 0.9490019698082963, 1.17292040037628, 1.2252109253937036, 1.0630899770203712, 0.9501253315498, 1.1554100141185313, 0.9750630804175908, 0.7767886197654582, 1.1083496989065207, 1.0691171534514428, 0.9622501695901673, 0.7039106057429881, 0.6239926555933131, 0.8529703067335617, 0.6814550219571317, 0.5712791118671223, 0.46663888670594544, 0.6490877455182594, 0.7192663701253499, 0.6655914449281104, 0.633513298216501, 0.23026746213937938, 0.4673359823998118, 0.3171528926458266, 0.07602807519644704, -0.2895321690789674, -0.26172970671358464, -0.05541951087048677, -0.04778387635966519, 0.05006337504508401, -0.3216797321867066, -0.5438686551299857, -0.15129321947589613, -0.5214453021514027, -0.227617792787213, -0.6742861553901391, -0.7147932860306822, -0.6388021735427036, -0.737069108083392, -0.8953480441571561, -0.8281660062636531, -0.6187293534716888, -0.9202335427399727, -0.6689090210827429, -0.7369501771023839, -0.8498373307273217, -0.6596774944881499, -0.99558975327244, -0.8793311259301868, -1.0943017449764623, -0.7512076791859212, -1.2006456235546248, -0.7484507254944082, -1.1761862015148608, -0.8121040359199118, -0.9932896894666424, -0.7267387336447415, -0.9997308651915706, -0.8342438296504306, -0.6908580315667887, -0.9872291525740696, -0.973051359294391, -0.5590551565798437, -0.7881391495995126, -0.7505180458442076, -0.4857040307367707, -0.5020426353858756, -0.6095979954656183, -0.36585876894134606, -0.2435713430593005, 0.022303268960226635, -0.3400198835365982, -0.2403210503853498, -0.05738485539686227, -0.15642787966374, 0.32180416131827266, 0.10688506496952496, 0.5515594728969968, 0.31247052400517855, 0.6427277079323361, 0.30240261025335086, 0.41824323587122775, 0.8060502420372119, 0.48612655515904885, 0.6669045000376095, 0.6494130722026361, 0.7863197134914363, 0.8690084761263894, 1.0344467195871003, 0.777171330766872, 0.6840503341018966, 1.0979494154841292, 1.160759465158367, 0.7721295288560982, 0.7595111740229177, 1.0966577209105268, 0.8288323270982327, 0.8415810065624862, 0.9587295113490557])
_X = np.array([0.012578949563923095, 0.018868424345884642, 0.06918422260157703, 0.08176317216550011, 0.3018947895341543, 0.32705268866200043, 0.35221058778984665, 0.37736848691769287, 0.4905790329930007, 0.5157369321208469, 0.5408948312486931, 0.5912106295043854, 0.7170001251436164, 0.723289599925578, 0.7358685494895011, 0.7924738225271549, 0.918263318166386, 0.9937370155499244, 1.0188949146777706, 1.0755001877154247, 1.113237036407194, 1.1195265111891555, 1.2327370572644634, 1.2578949563923094, 1.320789704211925, 1.4843160485429252, 1.7044476659115793, 1.7170266154755025, 1.7421845146033486, 1.74847398938531, 1.7610529389492333, 1.8553950606786564, 1.9497371824080796, 2.0063424554457336, 2.012631930227695, 2.0315003545735797, 2.037789829355541, 2.2201845980324264, 2.371131992799503, 2.55981623625835, 2.6038425597320805, 2.6352899336418885, 2.6478688832058115, 2.6604478327697345, 2.6604478327697345, 2.679316257115619, 2.7547899544991576, 2.7673689040630807, 2.8428426014466193, 2.9371847231760424, 3.0063689457776195, 3.163605815326658, 3.182474239672543, 3.1887637144545047, 3.1887637144545047, 3.2327900379282353, 3.239079512710197, 3.2893953109658893, 3.446632180514928, 3.566132201372197, 3.654184848319659, 3.6793427474475053, 3.7862638187408515, 3.824000667432621, 3.886895415252236, 3.886895415252236, 3.886895415252236, 4.22652705347816, 4.302000750861699, 4.452948145628776, 4.47181656997466, 4.578737641268006, 4.585027116049968, 4.585027116049968, 4.698237662125276, 4.71710608647116, 4.842895582110391, 4.8680534812382374, 5.050448249915123, 5.069316674261007, 5.100764048170815, 5.176237745554354, 5.276869342065738, 5.383790413359084, 5.390079888141046, 5.547316757690084, 5.572474656817931, 5.591343081163815, 5.603922030727738, 5.666816778547354, 5.6856852028932385, 5.780027324622662, 5.836632597660316, 6.006448416773278, 6.019027366337201, 6.044185265465047, 6.100790538502701, 6.169974761104278, 6.188843185450162, 6.283185307179586])

# print(_X.tolist())
# f = open("dataset.txt", "w")
# f.write(', '.join(str(e) for e in _X.tolist()))
# f.write("\n ----")
# f.write(', '.join(str(e) for e in _y.tolist()))
#_y[50] = 3.0

SSEsG = np.empty(0)
SSEsQ = np.empty(0)

step = (_X.max() - _X.min()) / _X.shape[0]
_X_test = np.arange(_X.min(), _X.max(), step)

for h, color in zip(H, colors):
    Y = nadarayaWatson(_X, _y, kernelG, euclidean, h, _X_test)
    plt.plot(_X, Y, color=color, label='h = ' + str(format(h, '.1f')))

    SSEsG = np.append(SSEsG, SSE(_y, Y))
plt.title('Ядерное сглаживание с гауссовским ядром')
plt.plot(_X, _y, 'o', markersize=2.5, color='black')
plt.legend()
plt.show()

for h, color in zip(H, colors):
    Y = nadarayaWatson(_X, _y, kernelQ, euclidean, h, _X_test)
    plt.plot(_X, Y, color=color, label='h = ' + str(format(h, '.1f')))

    SSEsQ = np.append(SSEsQ, SSE(_y, Y))
plt.title('Ядерное сглаживание с квартическим ядром')
plt.plot(_X, _y, 'o', markersize=2.5, color='black')
plt.legend()
plt.show()

dataF = {'h': H, 'гауссовское ядро': SSEsG, 'квартическое ядро': SSEsQ}
df = pd.DataFrame(dataF)
df.style
